#include <WiFi.h>
#include <ESPAsyncWebServer.h>
#include <AsyncTCP.h>
#include <ESPAsyncOTA.h>

// WiFi-Zugangsdaten
const char* ssid = "DeinSSID";
const char* password = "DeinPasswort";

// Erstellen eines AsyncWebServers auf Port 80
AsyncWebServer server(80);

void setup() {
  // Serielle Schnittstelle zur Überwachung starten
  Serial.begin(115200);

  // Mit dem WLAN verbinden
  WiFi.begin(ssid, password);
  Serial.print("Verbinde mit WiFi ");
  
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }
  Serial.println(" verbunden!");
  Serial.print("IP-Adresse: ");
  Serial.println(WiFi.localIP());

  // OTA-Ereignis-Callbacks definieren
  AsyncOTA.onStart([]() {
    String type;
    if (AsyncOTA.getCommand() == U_FLASH) {
      type = "Firmware";
    } else { // U_SPIFFS
      type = "Dateisystem";
    }
    // OTA beginnt
    Serial.println("Start updating " + type);
  });
  
  AsyncOTA.onEnd([]() {
    // OTA beendet
    Serial.println("\nOTA Update abgeschlossen.");
  });

  AsyncOTA.onProgress([](unsigned int progress, unsigned int total) {
    // Fortschritt in Prozent anzeigen
    Serial.printf("Fortschritt: %u%%\r", (progress * 100) / total);
  });

  AsyncOTA.onError([](ota_error_t error) {
    // Fehlerbehandlung
    Serial.printf("OTA Fehler [%u]: ", error);
    if (error == OTA_AUTH_ERROR) {
      Serial.println("Auth Fehler");
    } else if (error == OTA_BEGIN_ERROR) {
      Serial.println("Start Fehler");
    } else if (error == OTA_CONNECT_ERROR) {
      Serial.println("Verbindungsfehler");
    } else if (error == OTA_RECEIVE_ERROR) {
      Serial.println("Empfangsfehler");
    } else if (error == OTA_END_ERROR) {
      Serial.println("Ende Fehler");
    }
  });

  // OTA initialisieren
  AsyncOTA.begin();

  // Route für das Hochladen der Firmware
  server.on("/update", HTTP_POST, [](AsyncWebServerRequest *request) {
    request->send(200, "text/plain", (Update.hasError()) ? "FAIL" : "OK");
    ESP.restart();  // Neustart nach dem OTA-Update
  }, [](AsyncWebServerRequest *request, String filename, size_t index, uint8_t *data, size_t len, bool final) {
    if (!index) {
      Serial.printf("Update gestartet: %s\n", filename.c_str());
      if (!Update.begin(UPDATE_SIZE_UNKNOWN)) { // Start des OTA-Updates
        Update.printError(Serial);
      }
    }
    if (Update.write(data, len) != len) { // Daten schreiben
      Update.printError(Serial);
    }
    if (final) {
      if (Update.end(true)) { // Abschluss des OTA-Updates
        Serial.printf("Update abgeschlossen: %s\n", filename.c_str());
      } else {
        Update.printError(Serial);
      }
    }
  });

  // Root-Seite bereitstellen
  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request) {
    // HTML-Seite für OTA-Upload
    request->send(200, "text/html", R"rawliteral(
      <!DOCTYPE html>
      <html>
      <body>
        <h2>ESP32 OTA Update</h2>
        <form method="POST" action="/update" enctype="multipart/form-data">
          <input type="file" name="update">
          <input type="submit" value="Update">
        </form>
      </body>
      </html>
    )rawliteral");
  });

  // Webserver starten
  server.begin();
}

void loop() {
  // OTA-Handler
  AsyncOTA.handle();
}
